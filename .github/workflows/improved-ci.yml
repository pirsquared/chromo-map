name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .[dev]
    
    - name: Run linting
      run: |
        black --check chromo_map/ tests/
        isort --check-only chromo_map/ tests/
        flake8 chromo_map/ tests/
    
    - name: Run type checking (non-blocking)
      run: |
        mypy chromo_map --config-file mypy.ini || true
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=chromo_map --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
        pip install -r requirements.txt
    
    - name: Build package
      run: python -m build
    
    - name: Store package
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .[dev]
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
    
    - name: Build documentation
      run: |
        cd docs
        make html
    
    - name: Store documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/build/html/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run security scan
      run: |
        bandit -r chromo_map/ || true
        safety check || true

  publish-pypi:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/')
    needs: [test, build, docs]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/chromo-map
    permissions:
      id-token: write

    steps:
    - name: Download package
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  deploy-docs:
    name: Deploy Documentation
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    needs: [test, docs]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Download documentation
      uses: actions/download-artifact@v3
      with:
        name: documentation
        path: docs/build/html/
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/build/html/
